import { NativePanelParams } from './NativePanel/NativePanel';
import { SystemMessageDataType, ClientLogger, VoicePlayerSettings, AssistantSettings } from './typings';
export declare const initializeAssistantSDK: ({ initPhrase, url, userChannel, surface, userId, token, surfaceVersion, deviceId, locale, nativePanel, sdkVersion, enableRecord, recordParams, settings, voiceSettings, vpsVersion, features, capabilities, }: {
    initPhrase: string;
    url: string;
    userChannel: string;
    surface: string;
    userId?: string | undefined;
    token?: string | undefined;
    surfaceVersion?: string | undefined;
    deviceId?: string | undefined;
    locale?: string | undefined;
    nativePanel?: NativePanelParams | null | undefined;
    sdkVersion?: string | undefined;
    enableRecord?: boolean | undefined;
    recordParams?: {
        defaultActive?: boolean | undefined;
        logger?: ClientLogger | undefined;
    } | undefined;
    settings?: AssistantSettings | undefined;
    voiceSettings?: VoicePlayerSettings | undefined;
    vpsVersion?: number | undefined;
    features?: string | undefined;
    capabilities?: string | undefined;
}) => {
    sendText: (text: string, params?: {}) => Promise<SystemMessageDataType>;
    on: <K extends "outcoming" | "connecting" | "ready" | "close" | "message" | "systemMessage">(event: K, cb: import("./typings").EventsType[K]) => () => void;
    destroy: () => void;
};
//# sourceMappingURL=dev.d.ts.map