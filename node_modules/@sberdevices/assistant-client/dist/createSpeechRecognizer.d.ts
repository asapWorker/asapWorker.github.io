import { createVoiceListener } from './createVoiceListener';
import { OriginalMessageType } from './typings';
declare type speechRecognizerEvents = {
    hypotesis: (text: string, last: boolean) => void;
};
export declare const createSpeechRecognizer: (voiceListener: ReturnType<typeof createVoiceListener>) => {
    start: ({ sendVoice, messageId, onMessage, }: {
        sendVoice: (data: Uint8Array, last: boolean) => void;
        messageId: number;
        onMessage: (cb: (message: OriginalMessageType) => void) => () => void;
    }) => void;
    stop: () => void;
    on: <K extends "hypotesis">(event: K, cb: speechRecognizerEvents[K]) => () => void;
    readonly status: "inactive" | "active";
};
export {};
//# sourceMappingURL=createSpeechRecognizer.d.ts.map