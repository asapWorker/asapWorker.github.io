import { IDevice, ISettings, ILegacyDevice, IInitialSettings } from './proto';
import { EventsType, SystemMessageDataType, CreateClientDataType, ClientLogger } from './typings';
export declare const createClient: (clientParams: CreateClientDataType, logger?: ClientLogger | undefined) => {
    once: <K extends "outcoming" | "connecting" | "ready" | "close" | "message" | "systemMessage">(event: K, cb: EventsType[K]) => () => void;
    send: ({ payload, messageId, ...other }: {
        payload: ({
            settings: import("./proto").Settings;
        } & {
            last: 1 | -1;
            messageName?: string | undefined;
            meta?: {
                [k: string]: string;
            } | undefined;
        }) | ({
            device: import("./proto").Device;
        } & {
            last: 1 | -1;
            messageName?: string | undefined;
            meta?: {
                [k: string]: string;
            } | undefined;
        }) | ({
            systemMessage: import("./proto").SystemMessage;
        } & {
            last: 1 | -1;
            messageName?: string | undefined;
            meta?: {
                [k: string]: string;
            } | undefined;
        }) | ({
            text: import("./proto").Text;
        } & {
            last: 1 | -1;
            messageName?: string | undefined;
            meta?: {
                [k: string]: string;
            } | undefined;
        }) | ({
            voice: import("./proto").Voice;
        } & {
            last: 1 | -1;
            messageName?: string | undefined;
            meta?: {
                [k: string]: string;
            } | undefined;
        }) | ({
            legacyDevice: import("./proto").LegacyDevice;
        } & {
            last: 1 | -1;
            messageName?: string | undefined;
            meta?: {
                [k: string]: string;
            } | undefined;
        }) | ({
            initialSettings: import("./proto").InitialSettings;
        } & {
            last: 1 | -1;
            messageName?: string | undefined;
            meta?: {
                [k: string]: string;
            } | undefined;
        });
        messageId: number;
    }) => void;
    sendDevice: (data: IDevice, last?: boolean, messageId?: number) => void;
    sendLegacyDevice: (data: ILegacyDevice, last?: boolean, messageId?: number) => void;
    sendSettings: (data: ISettings, last?: boolean, messageId?: number) => void;
    sendText: (data: string, params?: {
        messageId?: number | undefined;
        last?: 1 | -1 | undefined;
        messageName?: string | undefined;
        vpsToken?: string | undefined;
        userId?: string | undefined;
        token?: string | undefined;
        userChannel?: string | undefined;
        version?: import("./typings").VpsVersion | undefined;
        meta?: {
            [k: string]: string;
        } | undefined;
    }, type?: string, messageId?: number) => Promise<SystemMessageDataType>;
    sendVoice: (data: Uint8Array, last?: boolean, messageId?: number, mesName?: string | undefined, params?: {
        meta?: {
            [k: string]: string;
        } | undefined;
    }) => void;
    waitForAnswerToUser: (messageId: number) => Promise<SystemMessageDataType>;
    sendSystemMessage: ({ data, messageName: mesName }: {
        data: unknown;
        messageName?: string | undefined;
    }, last?: boolean, messageId?: number, params?: {
        meta?: {
            [k: string]: string;
        } | undefined;
    }) => Promise<SystemMessageDataType>;
    on: <K_1 extends "outcoming" | "connecting" | "ready" | "close" | "message" | "systemMessage">(event: K_1, cb: EventsType[K_1]) => () => void;
    updateDefaults: (obj: Partial<{
        userId: string;
        token: string;
        userChannel: string;
        messageName: string | undefined;
        vpsToken: string | undefined;
        version: import("./typings").VpsVersion;
    }> | Partial<{
        token: string;
        messageName: string | undefined;
        version: import("./typings").VpsVersion;
        userId?: undefined;
        userChannel?: undefined;
        vpsToken?: undefined;
    }>) => void;
    destroy: () => void;
    batch: <T>(cb: (methods: {
        sendDevice: (data: IDevice, last?: boolean, messageId?: number) => void;
        sendLegacyDevice: (data: ILegacyDevice, last?: boolean, messageId?: number) => void;
        sendSettings: (data: ISettings, last?: boolean, messageId?: number) => void;
        sendInitialSettings: (data: IInitialSettings, last?: boolean, messageId?: number, params?: {
            meta?: {
                [k: string]: string;
            } | undefined;
        }) => void;
        send: ({ payload, messageId, ...other }: {
            payload: ({
                settings: import("./proto").Settings;
            } & {
                last: 1 | -1;
                messageName?: string | undefined;
                meta?: {
                    [k: string]: string;
                } | undefined;
            }) | ({
                device: import("./proto").Device;
            } & {
                last: 1 | -1;
                messageName?: string | undefined;
                meta?: {
                    [k: string]: string;
                } | undefined;
            }) | ({
                systemMessage: import("./proto").SystemMessage;
            } & {
                last: 1 | -1;
                messageName?: string | undefined;
                meta?: {
                    [k: string]: string;
                } | undefined;
            }) | ({
                text: import("./proto").Text;
            } & {
                last: 1 | -1;
                messageName?: string | undefined;
                meta?: {
                    [k: string]: string;
                } | undefined;
            }) | ({
                voice: import("./proto").Voice;
            } & {
                last: 1 | -1;
                messageName?: string | undefined;
                meta?: {
                    [k: string]: string;
                } | undefined;
            }) | ({
                legacyDevice: import("./proto").LegacyDevice;
            } & {
                last: 1 | -1;
                messageName?: string | undefined;
                meta?: {
                    [k: string]: string;
                } | undefined;
            }) | ({
                initialSettings: import("./proto").InitialSettings;
            } & {
                last: 1 | -1;
                messageName?: string | undefined;
                meta?: {
                    [k: string]: string;
                } | undefined;
            });
            messageId: number;
        }) => void;
        sendText: (data: string, params?: {
            messageId?: number | undefined;
            last?: 1 | -1 | undefined;
            messageName?: string | undefined;
            vpsToken?: string | undefined;
            userId?: string | undefined;
            token?: string | undefined;
            userChannel?: string | undefined;
            version?: import("./typings").VpsVersion | undefined;
            meta?: {
                [k: string]: string;
            } | undefined;
        }, type?: string, messageId?: number) => Promise<SystemMessageDataType>;
        sendSystemMessage: (data: {
            data: unknown;
            messageName?: string | undefined;
        }, last: boolean, params?: {
            meta?: {
                [k: string]: string;
            } | undefined;
        } | undefined) => void;
        sendVoice: (data: Uint8Array, last: boolean, messageName?: string | undefined, params?: {
            meta?: {
                [k: string]: string;
            } | undefined;
        } | undefined) => void;
        messageId: number;
    }) => T) => T;
    readonly currentMessageId: number;
};
//# sourceMappingURL=client.d.ts.map